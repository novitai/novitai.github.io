(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{628:function(t,e){t.exports={attributes:{title:"Build a Blog with Nuxt and Markdown",date:"2020-02-08T00:00:00.000Z",description:"Learn how to build a blog with Nuxt and Markdown",tags:[]},html:'<nav class="table-of-contents"><ol><li><a href="#the-nuxt-big-thing">The Nuxt Big Thing</a></li><li><a href="#why-markdown%3F">Why Markdown?</a></li><li><a href="#loading-markdown-files">Loading Markdown Files</a></li><li><a href="#a-markdown-component">A Markdown Component</a></li><li><a href="#writing-your-blog-posts">Writing Your Blog Posts</a><ol><li><a href="#nuxt-configuration">Nuxt Configuration</a></li></ol></li><li><a href="#creating-the-blog-pages">Creating the Blog Pages</a><ol><li><a href="#listing-your-blog-posts">Listing Your Blog Posts</a></li><li><a href="#showing-an-individual-blog-post">Showing an Individual Blog Post</a></li></ol></li><li><a href="#wrapping-up">Wrapping Up</a></li></ol></nav><post-aside type="warning">\n<p>Since writing this post, <a href="https://content.nuxtjs.org/">@nuxt/content</a> has been released which makes it much easier to handle Markdown content with Nuxt. It also features hot reload in development and handles Vue components in Markdown!</p>\n</post-aside>\n<p>I recently redesigned my website to showcase my projects and facilitate writing my new blog, which you’re reading right now! I wanted my new website to be performant, look good and be accessible to everyone. However, I also wanted <em>my</em> experience to be good — I wanted to be able to easily write new blog posts and for it to just work, without writing code for each new page I wanted to add to my website.</p>\n<h2 id="the-nuxt-big-thing" tabindex="-1"><a class="header-anchor" href="#the-nuxt-big-thing">The Nuxt Big Thing</a></h2>\n<p>At the moment, <a href="https://jamstack.org">JAMstack</a> seems to be all the rage, with an increasing number of websites being pre-rendered and served by a <abbr title="Content Delivery Network">CDN</abbr>. Building websites in this manner brings brilliant performance at a cheap cost; this website is hosted for free on Netlify, I just pay around $10 a year for my domain.</p>\n<p>I decided to make my new website using Nuxt, a static site generator (amongst other things) which is built upon Vue. Nuxt has allowed me to build a performant website, with a great <em>developer</em> experience as well as user experience.</p>\n<p>In this series of blog posts, I’m going to detail how I use Markdown for the content of my website, how I created a responsive, lazy image component, a dark theme and more.</p>\n<h2 id="why-markdown%3F" tabindex="-1"><a class="header-anchor" href="#why-markdown%3F">Why Markdown?</a></h2>\n<p>In my opinion, Markdown is a fantastic middle ground between writing markup (for example, HTML) and writing normal text. It allows you to express everything you might need in a blog post, like <em>italics</em>, <strong>emphasis</strong>, <code>inline code</code> and images with a very concise syntax.</p>\n<pre class="highlight" data-language="md"><code><span class="highlight__lines"><span data-number=" 1"></span><span data-number=" 2"></span><span data-number=" 3"></span><span data-number=" 4"></span><span data-number=" 5"></span></span><span class="highlight__code"><span class="highlight__section"># An Example Blog Post</span>\n\nMay look something like this. It\'s easy to <span class="highlight__strong">**emphasise**</span> words, link to [<span class="highlight__string">other sites</span>](<span class="highlight__link">https://gregiv.es</span>), write <span class="highlight__code">`inline code`</span> or standalone code blocks, and add images.\n\n![<span class="highlight__string">Smiley face for Markdown</span>](<span class="highlight__link">smiley.gif</span>)\n</span></code></pre>\n<h2 id="loading-markdown-files" tabindex="-1"><a class="header-anchor" href="#loading-markdown-files">Loading Markdown Files</a></h2>\n<p>In order to load Markdown files into Nuxt, we need to use a webpack loader. A webpack loader simply preprocesses a file, of a given type, to allow us to include it into our application. Conveniently, <code>frontmatter-markdown-loader</code> does exactly what we want: it compiles our Markdown into HTML and then gives it to us <em>as a Vue render function</em>, including the front matter attributes from the top of the Markdown file. All we need to do is to tell webpack to use <code>frontmatter-markdown-loader</code> whenever it sees a Markdown file, which we can do in <code>nuxt.config.js</code>.</p>\n<pre class="highlight" data-language="js"><code><span class="highlight__lines"><span data-number=" 1" data-highlight=""></span><span data-number=" 2"></span><span data-number=" 3"></span><span data-number=" 4"></span><span data-number=" 5"></span><span data-number=" 6" data-highlight=""></span><span data-number=" 7" data-highlight=""></span><span data-number=" 8" data-highlight=""></span><span data-number=" 9" data-highlight=""></span><span data-number="10" data-highlight=""></span><span data-number="11" data-highlight=""></span><span data-number="12" data-highlight=""></span><span data-number="13" data-highlight=""></span><span data-number="14" data-highlight=""></span><span data-number="15" data-highlight=""></span><span data-number="16"></span><span data-number="17"></span><span data-number="18"></span></span><span class="highlight__code"><span class="highlight__keyword">import</span> <span class="highlight__title class_">FMMode</span> <span class="highlight__keyword">from</span> <span class="highlight__string">\'frontmatter-markdown-loader/mode\'</span>\n\n<span class="highlight__keyword">export</span> <span class="highlight__keyword">default</span> {\n  <span class="highlight__attr">build</span>: {\n    <span class="highlight__title function_">extend</span>(<span class="highlight__params">config</span>) {\n      config.<span class="highlight__property">module</span>.<span class="highlight__property">rules</span>.<span class="highlight__title function_">push</span>({\n        <span class="highlight__attr">test</span>: <span class="highlight__regexp">/\\.md$/</span>,\n        <span class="highlight__attr">loader</span>: <span class="highlight__string">\'frontmatter-markdown-loader\'</span>,\n        <span class="highlight__attr">options</span>: {\n          <span class="highlight__attr">mode</span>: [<span class="highlight__title class_">FMMode</span>.<span class="highlight__property">VUE_RENDER_FUNCTIONS</span>],\n          <span class="highlight__attr">vue</span>: {\n            <span class="highlight__attr">root</span>: <span class="highlight__string">\'markdown\'</span> <span class="highlight__comment">// The class name of the root div</span>\n          }\n        }\n      })\n    }\n  }\n}\n</span></code></pre>\n<p>By default, <code>frontmatter-markdown-loader</code> uses <code>markdown-it</code> to compile the Markdown. If you wish, you can pass your own options to <code>markdown-it</code> or override the Markdown compilation completely with your Markdown compiler of choice, see <a href="https://hmsk.github.io/frontmatter-markdown-loader/options.html#markdown-compilation">the documentation</a> on how to do this.</p>\n<h2 id="a-markdown-component" tabindex="-1"><a class="header-anchor" href="#a-markdown-component">A Markdown Component</a></h2>\n<p>Now we have told webpack how to load Markdown files, we need some way to show them to the user! Let’s create a Markdown component, I’ve just called mine <code>Markdown.vue</code> for ease, within your <code>components</code> directory.</p>\n<pre class="highlight" data-language="vue"><code><span class="highlight__lines"><span data-number=" 1"></span><span data-number=" 2"></span><span data-number=" 3"></span><span data-number=" 4"></span><span data-number=" 5"></span><span data-number=" 6"></span><span data-number=" 7"></span><span data-number=" 8"></span><span data-number=" 9"></span><span data-number="10"></span><span data-number="11"></span><span data-number="12"></span><span data-number="13"></span><span data-number="14"></span><span data-number="15"></span><span data-number="16"></span><span data-number="17"></span><span data-number="18"></span><span data-number="19"></span><span data-number="20"></span><span data-number="21"></span><span data-number="22"></span><span data-number="23"></span><span data-number="24"></span><span data-number="25"></span><span data-number="26"></span><span data-number="27"></span></span><span class="highlight__code"><span class="highlight__tag">&lt;<span class="highlight__name">script</span>&gt;</span><span class="language-javascript">\n<span class="highlight__keyword">export</span> <span class="highlight__keyword">default</span> {\n  <span class="highlight__attr">props</span>: {\n    <span class="highlight__attr">markdown</span>: {\n      <span class="highlight__attr">type</span>: <span class="highlight__title class_">Object</span>,\n      <span class="highlight__attr">required</span>: <span class="highlight__literal">true</span>\n    }\n  },\n  <span class="highlight__title function_">created</span>(<span class="highlight__params"></span>) {\n    <span class="highlight__comment">// eslint-disable-next-line no-new-func</span>\n    <span class="highlight__variable language_">this</span>.<span class="highlight__property">templateRender</span> = <span class="highlight__keyword">new</span> <span class="highlight__title class_">Function</span>(<span class="highlight__variable language_">this</span>.<span class="highlight__property">markdown</span>.<span class="highlight__property">vue</span>.<span class="highlight__property">render</span>)()\n    <span class="highlight__comment">// eslint-disable-next-line no-new-func</span>\n    <span class="highlight__variable language_">this</span>.<span class="highlight__property">$options</span>.<span class="highlight__property">staticRenderFns</span> = <span class="highlight__keyword">new</span> <span class="highlight__title class_">Function</span>(\n      <span class="highlight__variable language_">this</span>.<span class="highlight__property">markdown</span>.<span class="highlight__property">vue</span>.<span class="highlight__property">staticRenderFns</span>\n    )()\n  },\n  <span class="highlight__title function_">render</span>(<span class="highlight__params">h</span>) {\n    <span class="highlight__keyword">return</span> <span class="highlight__variable language_">this</span>.<span class="highlight__property">templateRender</span> ? <span class="highlight__variable language_">this</span>.<span class="highlight__title function_">templateRender</span>() : <span class="highlight__title function_">h</span>(<span class="highlight__string">\'div\'</span>)\n  }\n}\n</span><span class="highlight__tag">&lt;/<span class="highlight__name">script</span>&gt;</span>\n\n<span class="highlight__tag">&lt;<span class="highlight__name">style</span>&gt;</span><span class="language-css">\n<span class="highlight__selector-class">.markdown</span> {\n  <span class="highlight__comment">/* Put your Markdown styles here */</span>\n}\n</span><span class="highlight__tag">&lt;/<span class="highlight__name">style</span>&gt;</span>\n</span></code></pre>\n<p>If you’re new to Vue, you might be surprised to see that our Markdown component doesn’t have a <code>&lt;template&gt;</code> at the top. Instead of this, we have a <code>render</code> function on the component which is used to render the HTML — behind the scenes, Vue converts all templates into render functions anyway. The render function takes a single argument, which is used to create elements. It’s convention <a href="https://css-tricks.com/what-does-the-h-stand-for-in-vues-render-method/">to name this parameter <code>h</code></a>, but it can be thought of as <code>createElement</code>.</p>\n<p>Our Markdown component has a single required prop, a <code>markdown</code> object, which contains the render functions exposed by <code>frontmatter-markdown-loader</code>. These functions are actually passed as strings, so when the component is created we turn these back into functions by using <code>new Function()</code>. Note I’ve added two comments for ESLint above these lines, as <a href="https://eslint.org/docs/rules/no-new-func">it’s considered bad practice to create functions in this way</a>, but this is a valid case.</p>\n<p>In our component’s render function, we simply call the template render function which we assigned when the component was created, or create an empty div if the template render function doesn’t exist. That’s pretty much it, add some styles to your Markdown component and you’re good to go!</p>\n<h2 id="writing-your-blog-posts" tabindex="-1"><a class="header-anchor" href="#writing-your-blog-posts">Writing Your Blog Posts</a></h2>\n<p>Now it’s time to write your first blog post and let Nuxt know that you’ve written one. Create a new directory in the root of your project called <code>contents</code> and then create a Markdown file in there called <code>my-first-blog-post.md</code>. At the start of the Markdown file, we’re going to write some front matter, which is just some extra information about our blog post, such as the date and title. Front matter is always placed at the top of the file and is denoted by the <code>---</code> three dashes. You can also put Vue components in your Markdown files, because we’re using Vue render functions, to give your blog posts special powers!</p>\n<pre class="highlight" data-language="md"><code><span class="highlight__lines"><span data-number=" 1"></span><span data-number=" 2"></span><span data-number=" 3"></span><span data-number=" 4"></span><span data-number=" 5"></span><span data-number=" 6"></span><span data-number=" 7"></span><span data-number=" 8"></span></span><span class="highlight__code">---\ndate: 2015-10-21\n<span class="highlight__section">title: My First Blog Post\n---</span>\n\nWho moved my cheese cow mascarpone. Cheese on toast cheese on toast mozzarella bavarian bergkase emmental gouda cheese triangles. Croque monsieur dolcelatte macaroni cheese taleggio parmesan cheese triangles St. Agur blue cheese. Everyone loves cheese.\n\n<span class="language-xml"><span class="highlight__tag">&lt;<span class="highlight__name">cheese-slideshow</span>&gt;</span></span><span class="language-xml"><span class="highlight__tag">&lt;/<span class="highlight__name">cheese-slideshow</span>&gt;</span></span>\n</span></code></pre>\n<p>In the <code>contents</code> directory, we’re also going to create an <code>index.js</code> JavaScript file. We’ll use this file to let Nuxt know which blog posts we want to generate a page for, and the route corresponding to the pages.</p>\n<pre class="highlight" data-language="js"><code><span class="highlight__lines"><span data-number=" 1"></span><span data-number=" 2"></span></span><span class="highlight__code"><span class="highlight__keyword">export</span> <span class="highlight__keyword">const</span> postSlugs = [<span class="highlight__string">\'my-first-blog-post\'</span>]\n<span class="highlight__keyword">export</span> <span class="highlight__keyword">const</span> postRoutes = postSlugs.<span class="highlight__title function_">map</span>(<span class="highlight__function">(<span class="highlight__params">postSlug</span>) =&gt;</span> <span class="highlight__string">`/blog/<span class="highlight__subst">${postSlug}</span>`</span>)\n</span></code></pre>\n<h3 id="nuxt-configuration" tabindex="-1"><a class="header-anchor" href="#nuxt-configuration">Nuxt Configuration</a></h3>\n<p>We need to change the configuration of Nuxt slightly, to let it know about our blog posts. This is because the pages for our blog posts will be generated <em>dynamically</em>, i.e. we’re not manually creating a page for each of them. In <code>nuxt.config.js</code>, we’re going to import the routes for our blog posts at the top, and then pass them to <code>generate.routes</code>. This ensures that Nuxt will generate these pages when we run <code>nuxt generate</code>.</p>\n<pre class="highlight" data-language="js"><code><span class="highlight__lines"><span data-number=" 1" data-highlight=""></span><span data-number=" 2"></span><span data-number=" 3"></span><span data-number=" 4" data-highlight=""></span><span data-number=" 5" data-highlight=""></span><span data-number=" 6" data-highlight=""></span><span data-number=" 7"></span></span><span class="highlight__code"><span class="highlight__keyword">import</span> { postRoutes } <span class="highlight__keyword">from</span> <span class="highlight__string">\'./contents\'</span>\n\n<span class="highlight__keyword">export</span> <span class="highlight__keyword">default</span> {\n  <span class="highlight__attr">generate</span>: {\n    <span class="highlight__attr">routes</span>: postRoutes\n  }\n}\n</span></code></pre>\n<h2 id="creating-the-blog-pages" tabindex="-1"><a class="header-anchor" href="#creating-the-blog-pages">Creating the Blog Pages</a></h2>\n<p>Finally, we need to actually create the pages for our blog. Let’s create a new directory in the <code>pages</code> directory called <code>blog</code> and in this we’ll create two pages: <code>index.vue</code> to list the blog posts and <code>_post.vue</code> for the individual blog posts. Note that any dynamic page <strong>must be prefixed by an underscore</strong>.</p>\n<h3 id="listing-your-blog-posts" tabindex="-1"><a class="header-anchor" href="#listing-your-blog-posts">Listing Your Blog Posts</a></h3>\n<p>In <code>index.vue</code>, we’re going to use <code>asyncData</code> to load the blog posts before the component is created. We’ll map over the <code>postSlugs</code> array which we exported earlier, importing each blog post; this will use <code>frontmatter-markdown-loader</code> which we also set up earlier. In this page, we only need the attributes of each blog post so we’ll return just the attributes and then sort the posts depending on their date.</p>\n<pre class="highlight" data-language="vue"><code><span class="highlight__lines"><span data-number=" 1"></span><span data-number=" 2"></span><span data-number=" 3"></span><span data-number=" 4"></span><span data-number=" 5"></span><span data-number=" 6"></span><span data-number=" 7"></span><span data-number=" 8"></span><span data-number=" 9"></span><span data-number="10"></span><span data-number="11"></span><span data-number="12"></span><span data-number="13"></span><span data-number="14"></span><span data-number="15"></span><span data-number="16"></span><span data-number="17"></span><span data-number="18"></span><span data-number="19"></span><span data-number="20"></span><span data-number="21"></span><span data-number="22"></span><span data-number="23"></span><span data-number="24"></span><span data-number="25"></span><span data-number="26"></span><span data-number="27"></span><span data-number="28"></span><span data-number="29"></span><span data-number="30"></span><span data-number="31"></span><span data-number="32"></span><span data-number="33"></span><span data-number="34"></span><span data-number="35"></span></span><span class="highlight__code"><span class="highlight__tag">&lt;<span class="highlight__name">template</span>&gt;</span>\n  <span class="highlight__tag">&lt;<span class="highlight__name">main</span>&gt;</span>\n    <span class="highlight__tag">&lt;<span class="highlight__name">h1</span>&gt;</span>My Blog<span class="highlight__tag">&lt;/<span class="highlight__name">h1</span>&gt;</span>\n    <span class="highlight__tag">&lt;<span class="highlight__name">ol</span>&gt;</span>\n      <span class="highlight__tag">&lt;<span class="highlight__name">li</span> <span class="highlight__attr">v-for</span>=<span class="highlight__string">"post in posts"</span> <span class="highlight__attr">:key</span>=<span class="highlight__string">"post.title"</span>&gt;</span>\n        <span class="highlight__tag">&lt;<span class="highlight__name">nuxt-link</span> <span class="highlight__attr">:to</span>=<span class="highlight__string">"`/blog/${post.slug}`"</span>&gt;</span>\n          {{ post.title }}\n        <span class="highlight__tag">&lt;/<span class="highlight__name">nuxt-link</span>&gt;</span>\n        - {{ post.date.toLocaleDateString() }}\n      <span class="highlight__tag">&lt;/<span class="highlight__name">li</span>&gt;</span>\n    <span class="highlight__tag">&lt;/<span class="highlight__name">ol</span>&gt;</span>\n  <span class="highlight__tag">&lt;/<span class="highlight__name">main</span>&gt;</span>\n<span class="highlight__tag">&lt;/<span class="highlight__name">template</span>&gt;</span>\n\n<span class="highlight__tag">&lt;<span class="highlight__name">script</span>&gt;</span><span class="language-javascript">\n<span class="highlight__keyword">import</span> { postSlugs } <span class="highlight__keyword">from</span> <span class="highlight__string">\'~/contents\'</span>\n\n<span class="highlight__keyword">export</span> <span class="highlight__keyword">default</span> {\n  <span class="highlight__keyword">async</span> <span class="highlight__title function_">asyncData</span>(<span class="highlight__params"></span>) {\n    <span class="highlight__keyword">const</span> posts = <span class="highlight__keyword">await</span> <span class="highlight__title class_">Promise</span>.<span class="highlight__title function_">all</span>(\n      postSlugs.<span class="highlight__title function_">map</span>(<span class="highlight__keyword">async</span> (postSlug) =&gt; {\n        <span class="highlight__keyword">const</span> post = <span class="highlight__keyword">await</span> <span class="highlight__title function_">import</span>(<span class="highlight__string">`~/contents/<span class="highlight__subst">${postSlug}</span>.md`</span>)\n        post.<span class="highlight__property">attributes</span>.<span class="highlight__property">date</span> = <span class="highlight__keyword">new</span> <span class="highlight__title class_">Date</span>(post.<span class="highlight__property">attributes</span>.<span class="highlight__property">date</span>)\n\n        <span class="highlight__keyword">return</span> post.<span class="highlight__property">attributes</span>\n      })\n    )\n    posts.<span class="highlight__title function_">sort</span>(<span class="highlight__function">(<span class="highlight__params">postA, postB</span>) =&gt;</span> postB.<span class="highlight__property">date</span> - postA.<span class="highlight__property">date</span>)\n\n    <span class="highlight__keyword">return</span> {\n      posts\n    }\n  }\n}\n</span><span class="highlight__tag">&lt;/<span class="highlight__name">script</span>&gt;</span>\n</span></code></pre>\n<h3 id="showing-an-individual-blog-post" tabindex="-1"><a class="header-anchor" href="#showing-an-individual-blog-post">Showing an Individual Blog Post</a></h3>\n<p>The last thing we need to do is create the page for the individual blog posts, the content itself! In a dynamic route such as <code>_post.vue</code>, the route parameters are passed into the context of <code>asyncData</code>: we can access the slug of our post (<code>my-first-blog-post</code>) using <code>params.post</code>. If you named your dynamic route <code>_slug.vue</code> instead, then you would access the route as <code>params.slug</code>.</p>\n<p>When we have the slug of the blog post, we’re going to import the corresponding Markdown file, again which will be loaded using <code>frontmatter-markdown-loader</code>. Note that if the user has requested a blog post which doesn’t exist, for example <code>/blog/non-existent-blog-post</code>, this would try to load <code>contents/non-existent-blog-post.md</code> which would error. We need to catch this error and instead render the error page by calling <code>error()</code> with the status code and error message.</p>\n<p>The template of our blog post displays the title and the date from the attributes of the Markdown file, then uses our Markdown component to render the body of the blog post!</p>\n<pre class="highlight" data-language="vue"><code><span class="highlight__lines"><span data-number=" 1"></span><span data-number=" 2"></span><span data-number=" 3"></span><span data-number=" 4"></span><span data-number=" 5"></span><span data-number=" 6"></span><span data-number=" 7"></span><span data-number=" 8"></span><span data-number=" 9"></span><span data-number="10"></span><span data-number="11"></span><span data-number="12"></span><span data-number="13"></span><span data-number="14"></span><span data-number="15"></span><span data-number="16"></span><span data-number="17"></span><span data-number="18"></span><span data-number="19"></span><span data-number="20"></span><span data-number="21"></span><span data-number="22"></span><span data-number="23"></span><span data-number="24"></span><span data-number="25"></span><span data-number="26"></span><span data-number="27"></span><span data-number="28"></span><span data-number="29"></span><span data-number="30"></span><span data-number="31"></span><span data-number="32"></span><span data-number="33"></span><span data-number="34"></span></span><span class="highlight__code"><span class="highlight__tag">&lt;<span class="highlight__name">template</span>&gt;</span>\n  <span class="highlight__tag">&lt;<span class="highlight__name">main</span>&gt;</span>\n    <span class="highlight__tag">&lt;<span class="highlight__name">h1</span>&gt;</span>{{ post.title }}<span class="highlight__tag">&lt;/<span class="highlight__name">h1</span>&gt;</span>\n    <span class="highlight__tag">&lt;<span class="highlight__name">p</span>&gt;</span>{{ post.date.toLocaleDateString() }}<span class="highlight__tag">&lt;/<span class="highlight__name">p</span>&gt;</span>\n\n    <span class="highlight__comment">&lt;!-- Our Markdown component! --&gt;</span>\n    <span class="highlight__tag">&lt;<span class="highlight__name">markdown</span> <span class="highlight__attr">:markdown</span>=<span class="highlight__string">"post"</span> /&gt;</span>\n  <span class="highlight__tag">&lt;/<span class="highlight__name">main</span>&gt;</span>\n<span class="highlight__tag">&lt;/<span class="highlight__name">template</span>&gt;</span>\n\n<span class="highlight__tag">&lt;<span class="highlight__name">script</span>&gt;</span><span class="language-javascript">\n<span class="highlight__keyword">import</span> <span class="highlight__title class_">Markdown</span> <span class="highlight__keyword">from</span> <span class="highlight__string">\'~/components/Markdown\'</span>\n\n<span class="highlight__keyword">export</span> <span class="highlight__keyword">default</span> {\n  <span class="highlight__attr">components</span>: {\n    <span class="highlight__title class_">Markdown</span>\n  },\n  <span class="highlight__keyword">async</span> <span class="highlight__title function_">asyncData</span>(<span class="highlight__params">{ params, error }</span>) {\n    <span class="highlight__keyword">try</span> {\n      <span class="highlight__keyword">const</span> post = <span class="highlight__keyword">await</span> <span class="highlight__title function_">import</span>(<span class="highlight__string">`~/contents/<span class="highlight__subst">${params.post}</span>.md`</span>)\n      post.<span class="highlight__property">attributes</span>.<span class="highlight__property">date</span> = <span class="highlight__keyword">new</span> <span class="highlight__title class_">Date</span>(post.<span class="highlight__property">attributes</span>.<span class="highlight__property">date</span>)\n\n      <span class="highlight__keyword">return</span> {\n        <span class="highlight__attr">post</span>: {\n          ...post.<span class="highlight__property">attributes</span>,\n          <span class="highlight__attr">vue</span>: post.<span class="highlight__property">vue</span>\n        }\n      }\n    } <span class="highlight__keyword">catch</span> {\n      <span class="highlight__title function_">error</span>({ <span class="highlight__attr">statusCode</span>: <span class="highlight__number">404</span>, <span class="highlight__attr">message</span>: <span class="highlight__string">\'This post could not be found\'</span> })\n    }\n  }\n}\n</span><span class="highlight__tag">&lt;/<span class="highlight__name">script</span>&gt;</span>\n</span></code></pre>\n<h2 id="wrapping-up" tabindex="-1"><a class="header-anchor" href="#wrapping-up">Wrapping Up</a></h2>\n<p>That’s everything! When you’ve finished all of these steps, you’ll be able to write blog posts in Markdown and see them appear in your <code>/blog</code> page. Clicking on a blog post will take you to <code>/blog/name-of-blog-post</code>, where you’ll see your blog post compiled from the Markdown using Vue’s render functions.</p>\n<p>Feel free to <nuxt-link to="/contact/">contact me</nuxt-link> if you have any queries or feedback and keep an eye out for my next blog post!</p>\n\x3c!-- prettier-ignore --\x3e\n',body:"<post-aside type=\"warning\">\n\nSince writing this post, [@nuxt/content](https://content.nuxtjs.org/) has been released which makes it much easier to handle Markdown content with Nuxt. It also features hot reload in development and handles Vue components in Markdown!\n\n</post-aside>\n\nI recently redesigned my website to showcase my projects and facilitate writing my new blog, which you're reading right now! I wanted my new website to be performant, look good and be accessible to everyone. However, I also wanted _my_ experience to be good --- I wanted to be able to easily write new blog posts and for it to just work, without writing code for each new page I wanted to add to my website.\n\n## The Nuxt Big Thing\n\nAt the moment, [JAMstack](https://jamstack.org) seems to be all the rage, with an increasing number of websites being pre-rendered and served by a CDN. Building websites in this manner brings brilliant performance at a cheap cost; this website is hosted for free on Netlify, I just pay around $10 a year for my domain.\n\nI decided to make my new website using Nuxt, a static site generator (amongst other things) which is built upon Vue. Nuxt has allowed me to build a performant website, with a great _developer_ experience as well as user experience.\n\nIn this series of blog posts, I'm going to detail how I use Markdown for the content of my website, how I created a responsive, lazy image component, a dark theme and more.\n\n## Why Markdown?\n\nIn my opinion, Markdown is a fantastic middle ground between writing markup (for example, HTML) and writing normal text. It allows you to express everything you might need in a blog post, like _italics_, **emphasis**, `inline code` and images with a very concise syntax.\n\n```md\n# An Example Blog Post\n\nMay look something like this. It's easy to **emphasise** words, link to [other sites](https://gregiv.es), write `inline code` or standalone code blocks, and add images.\n\n![Smiley face for Markdown](smiley.gif)\n```\n\n## Loading Markdown Files\n\nIn order to load Markdown files into Nuxt, we need to use a webpack loader. A webpack loader simply preprocesses a file, of a given type, to allow us to include it into our application. Conveniently, `frontmatter-markdown-loader` does exactly what we want: it compiles our Markdown into HTML and then gives it to us _as a Vue render function_, including the front matter attributes from the top of the Markdown file. All we need to do is to tell webpack to use `frontmatter-markdown-loader` whenever it sees a Markdown file, which we can do in `nuxt.config.js`.\n\n```js {1,6-15}\nimport FMMode from 'frontmatter-markdown-loader/mode'\n\nexport default {\n  build: {\n    extend(config) {\n      config.module.rules.push({\n        test: /\\.md$/,\n        loader: 'frontmatter-markdown-loader',\n        options: {\n          mode: [FMMode.VUE_RENDER_FUNCTIONS],\n          vue: {\n            root: 'markdown' // The class name of the root div\n          }\n        }\n      })\n    }\n  }\n}\n```\n\nBy default, `frontmatter-markdown-loader` uses `markdown-it` to compile the Markdown. If you wish, you can pass your own options to `markdown-it` or override the Markdown compilation completely with your Markdown compiler of choice, see [the documentation](https://hmsk.github.io/frontmatter-markdown-loader/options.html#markdown-compilation) on how to do this.\n\n## A Markdown Component\n\nNow we have told webpack how to load Markdown files, we need some way to show them to the user! Let's create a Markdown component, I've just called mine `Markdown.vue` for ease, within your `components` directory.\n\n```vue\n<script>\nexport default {\n  props: {\n    markdown: {\n      type: Object,\n      required: true\n    }\n  },\n  created() {\n    // eslint-disable-next-line no-new-func\n    this.templateRender = new Function(this.markdown.vue.render)()\n    // eslint-disable-next-line no-new-func\n    this.$options.staticRenderFns = new Function(\n      this.markdown.vue.staticRenderFns\n    )()\n  },\n  render(h) {\n    return this.templateRender ? this.templateRender() : h('div')\n  }\n}\n<\/script>\n\n<style>\n.markdown {\n  /* Put your Markdown styles here */\n}\n</style>\n```\n\nIf you're new to Vue, you might be surprised to see that our Markdown component doesn't have a `<template>` at the top. Instead of this, we have a `render` function on the component which is used to render the HTML --- behind the scenes, Vue converts all templates into render functions anyway. The render function takes a single argument, which is used to create elements. It's convention [to name this parameter `h`](https://css-tricks.com/what-does-the-h-stand-for-in-vues-render-method/), but it can be thought of as `createElement`.\n\nOur Markdown component has a single required prop, a `markdown` object, which contains the render functions exposed by `frontmatter-markdown-loader`. These functions are actually passed as strings, so when the component is created we turn these back into functions by using `new Function()`. Note I've added two comments for ESLint above these lines, as [it's considered bad practice to create functions in this way](https://eslint.org/docs/rules/no-new-func), but this is a valid case.\n\nIn our component's render function, we simply call the template render function which we assigned when the component was created, or create an empty div if the template render function doesn't exist. That's pretty much it, add some styles to your Markdown component and you're good to go!\n\n## Writing Your Blog Posts\n\nNow it's time to write your first blog post and let Nuxt know that you've written one. Create a new directory in the root of your project called `contents` and then create a Markdown file in there called `my-first-blog-post.md`. At the start of the Markdown file, we're going to write some front matter, which is just some extra information about our blog post, such as the date and title. Front matter is always placed at the top of the file and is denoted by the `---` three dashes. You can also put Vue components in your Markdown files, because we're using Vue render functions, to give your blog posts special powers!\n\n```md\n---\ndate: 2015-10-21\ntitle: My First Blog Post\n---\n\nWho moved my cheese cow mascarpone. Cheese on toast cheese on toast mozzarella bavarian bergkase emmental gouda cheese triangles. Croque monsieur dolcelatte macaroni cheese taleggio parmesan cheese triangles St. Agur blue cheese. Everyone loves cheese.\n\n<cheese-slideshow></cheese-slideshow>\n```\n\nIn the `contents` directory, we're also going to create an `index.js` JavaScript file. We'll use this file to let Nuxt know which blog posts we want to generate a page for, and the route corresponding to the pages.\n\n```js\nexport const postSlugs = ['my-first-blog-post']\nexport const postRoutes = postSlugs.map((postSlug) => `/blog/${postSlug}`)\n```\n\n### Nuxt Configuration\n\nWe need to change the configuration of Nuxt slightly, to let it know about our blog posts. This is because the pages for our blog posts will be generated _dynamically_, i.e. we're not manually creating a page for each of them. In `nuxt.config.js`, we're going to import the routes for our blog posts at the top, and then pass them to `generate.routes`. This ensures that Nuxt will generate these pages when we run `nuxt generate`.\n\n```js {1,4-6}\nimport { postRoutes } from './contents'\n\nexport default {\n  generate: {\n    routes: postRoutes\n  }\n}\n```\n\n## Creating the Blog Pages\n\nFinally, we need to actually create the pages for our blog. Let's create a new directory in the `pages` directory called `blog` and in this we'll create two pages: `index.vue` to list the blog posts and `_post.vue` for the individual blog posts. Note that any dynamic page **must be prefixed by an underscore**.\n\n### Listing Your Blog Posts\n\nIn `index.vue`, we're going to use `asyncData` to load the blog posts before the component is created. We'll map over the `postSlugs` array which we exported earlier, importing each blog post; this will use `frontmatter-markdown-loader` which we also set up earlier. In this page, we only need the attributes of each blog post so we'll return just the attributes and then sort the posts depending on their date.\n\n```vue\n<template>\n  <main>\n    <h1>My Blog</h1>\n    <ol>\n      <li v-for=\"post in posts\" :key=\"post.title\">\n        <nuxt-link :to=\"`/blog/${post.slug}`\">\n          {{ post.title }}\n        </nuxt-link>\n        - {{ post.date.toLocaleDateString() }}\n      </li>\n    </ol>\n  </main>\n</template>\n\n<script>\nimport { postSlugs } from '~/contents'\n\nexport default {\n  async asyncData() {\n    const posts = await Promise.all(\n      postSlugs.map(async (postSlug) => {\n        const post = await import(`~/contents/${postSlug}.md`)\n        post.attributes.date = new Date(post.attributes.date)\n\n        return post.attributes\n      })\n    )\n    posts.sort((postA, postB) => postB.date - postA.date)\n\n    return {\n      posts\n    }\n  }\n}\n<\/script>\n```\n\n### Showing an Individual Blog Post\n\nThe last thing we need to do is create the page for the individual blog posts, the content itself! In a dynamic route such as `_post.vue`, the route parameters are passed into the context of `asyncData`: we can access the slug of our post (`my-first-blog-post`) using `params.post`. If you named your dynamic route `_slug.vue` instead, then you would access the route as `params.slug`.\n\nWhen we have the slug of the blog post, we're going to import the corresponding Markdown file, again which will be loaded using `frontmatter-markdown-loader`. Note that if the user has requested a blog post which doesn't exist, for example `/blog/non-existent-blog-post`, this would try to load `contents/non-existent-blog-post.md` which would error. We need to catch this error and instead render the error page by calling `error()` with the status code and error message.\n\nThe template of our blog post displays the title and the date from the attributes of the Markdown file, then uses our Markdown component to render the body of the blog post!\n\n```vue\n<template>\n  <main>\n    <h1>{{ post.title }}</h1>\n    <p>{{ post.date.toLocaleDateString() }}</p>\n\n    \x3c!-- Our Markdown component! --\x3e\n    <markdown :markdown=\"post\" />\n  </main>\n</template>\n\n<script>\nimport Markdown from '~/components/Markdown'\n\nexport default {\n  components: {\n    Markdown\n  },\n  async asyncData({ params, error }) {\n    try {\n      const post = await import(`~/contents/${params.post}.md`)\n      post.attributes.date = new Date(post.attributes.date)\n\n      return {\n        post: {\n          ...post.attributes,\n          vue: post.vue\n        }\n      }\n    } catch {\n      error({ statusCode: 404, message: 'This post could not be found' })\n    }\n  }\n}\n<\/script>\n```\n\n## Wrapping Up\n\nThat's everything! When you've finished all of these steps, you'll be able to write blog posts in Markdown and see them appear in your `/blog` page. Clicking on a blog post will take you to `/blog/name-of-blog-post`, where you'll see your blog post compiled from the Markdown using Vue's render functions.\n\nFeel free to <nuxt-link to=\"/contact/\">contact me</nuxt-link> if you have any queries or feedback and keep an eye out for my next blog post!\n\n\x3c!-- prettier-ignore --\x3e\n*[CDN]: Content Delivery Network\n",vue:{render:'return function render() { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'div\',{staticClass:"markdown"},[_vm._m(0),_c(\'post-aside\',{attrs:{"type":"warning"}},[_c(\'p\',[_vm._v("Since writing this post, "),_c(\'a\',{attrs:{"href":"https://content.nuxtjs.org/"}},[_vm._v("@nuxt/content")]),_vm._v(" has been released which makes it much easier to handle Markdown content with Nuxt. It also features hot reload in development and handles Vue components in Markdown!")])]),_vm._v(" "),_vm._m(1),_vm._v(" "),_vm._m(2),_vm._v(" "),_vm._m(3),_vm._v(" "),_vm._m(4),_vm._v(" "),_c(\'p\',[_vm._v("In this series of blog posts, I’m going to detail how I use Markdown for the content of my website, how I created a responsive, lazy image component, a dark theme and more.")]),_vm._v(" "),_vm._m(5),_vm._v(" "),_vm._m(6),_vm._v(" "),_vm._m(7),_vm._v(" "),_vm._m(8),_vm._v(" "),_vm._m(9),_vm._v(" "),_vm._m(10),_vm._v(" "),_vm._m(11),_vm._v(" "),_vm._m(12),_vm._v(" "),_vm._m(13),_vm._v(" "),_vm._m(14),_vm._v(" "),_vm._m(15),_vm._v(" "),_vm._m(16),_vm._v(" "),_c(\'p\',[_vm._v("In our component’s render function, we simply call the template render function which we assigned when the component was created, or create an empty div if the template render function doesn’t exist. That’s pretty much it, add some styles to your Markdown component and you’re good to go!")]),_vm._v(" "),_vm._m(17),_vm._v(" "),_vm._m(18),_vm._v(" "),_vm._m(19),_vm._v(" "),_vm._m(20),_vm._v(" "),_vm._m(21),_vm._v(" "),_vm._m(22),_vm._v(" "),_vm._m(23),_vm._v(" "),_vm._m(24),_vm._v(" "),_vm._m(25),_vm._v(" "),_vm._m(26),_vm._v(" "),_vm._m(27),_vm._v(" "),_vm._m(28),_vm._v(" "),_vm._m(29),_vm._v(" "),_vm._m(30),_vm._v(" "),_vm._m(31),_vm._v(" "),_vm._m(32),_vm._v(" "),_c(\'p\',[_vm._v("The template of our blog post displays the title and the date from the attributes of the Markdown file, then uses our Markdown component to render the body of the blog post!")]),_vm._v(" "),_vm._m(33),_vm._v(" "),_vm._m(34),_vm._v(" "),_vm._m(35),_vm._v(" "),_c(\'p\',[_vm._v("Feel free to "),_c(\'nuxt-link\',{attrs:{"to":"/contact/"}},[_vm._v("contact me")]),_vm._v(" if you have any queries or feedback and keep an eye out for my next blog post!")],1)],1) }',staticRenderFns:'return [function () { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'nav\',{staticClass:"table-of-contents"},[_c(\'ol\',[_c(\'li\',[_c(\'a\',{attrs:{"href":"#the-nuxt-big-thing"}},[_vm._v("The Nuxt Big Thing")])]),_c(\'li\',[_c(\'a\',{attrs:{"href":"#why-markdown%3F"}},[_vm._v("Why Markdown?")])]),_c(\'li\',[_c(\'a\',{attrs:{"href":"#loading-markdown-files"}},[_vm._v("Loading Markdown Files")])]),_c(\'li\',[_c(\'a\',{attrs:{"href":"#a-markdown-component"}},[_vm._v("A Markdown Component")])]),_c(\'li\',[_c(\'a\',{attrs:{"href":"#writing-your-blog-posts"}},[_vm._v("Writing Your Blog Posts")]),_c(\'ol\',[_c(\'li\',[_c(\'a\',{attrs:{"href":"#nuxt-configuration"}},[_vm._v("Nuxt Configuration")])])])]),_c(\'li\',[_c(\'a\',{attrs:{"href":"#creating-the-blog-pages"}},[_vm._v("Creating the Blog Pages")]),_c(\'ol\',[_c(\'li\',[_c(\'a\',{attrs:{"href":"#listing-your-blog-posts"}},[_vm._v("Listing Your Blog Posts")])]),_c(\'li\',[_c(\'a\',{attrs:{"href":"#showing-an-individual-blog-post"}},[_vm._v("Showing an Individual Blog Post")])])])]),_c(\'li\',[_c(\'a\',{attrs:{"href":"#wrapping-up"}},[_vm._v("Wrapping Up")])])])]) },function () { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'p\',[_vm._v("I recently redesigned my website to showcase my projects and facilitate writing my new blog, which you’re reading right now! I wanted my new website to be performant, look good and be accessible to everyone. However, I also wanted "),_c(\'em\',[_vm._v("my")]),_vm._v(" experience to be good — I wanted to be able to easily write new blog posts and for it to just work, without writing code for each new page I wanted to add to my website.")]) },function () { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'h2\',{attrs:{"id":"the-nuxt-big-thing","tabindex":"-1"}},[_c(\'a\',{staticClass:"header-anchor",attrs:{"href":"#the-nuxt-big-thing"}},[_vm._v("The Nuxt Big Thing")])]) },function () { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'p\',[_vm._v("At the moment, "),_c(\'a\',{attrs:{"href":"https://jamstack.org"}},[_vm._v("JAMstack")]),_vm._v(" seems to be all the rage, with an increasing number of websites being pre-rendered and served by a "),_c(\'abbr\',{attrs:{"title":"Content Delivery Network"}},[_vm._v("CDN")]),_vm._v(". Building websites in this manner brings brilliant performance at a cheap cost; this website is hosted for free on Netlify, I just pay around $10 a year for my domain.")]) },function () { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'p\',[_vm._v("I decided to make my new website using Nuxt, a static site generator (amongst other things) which is built upon Vue. Nuxt has allowed me to build a performant website, with a great "),_c(\'em\',[_vm._v("developer")]),_vm._v(" experience as well as user experience.")]) },function () { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'h2\',{attrs:{"id":"why-markdown%3F","tabindex":"-1"}},[_c(\'a\',{staticClass:"header-anchor",attrs:{"href":"#why-markdown%3F"}},[_vm._v("Why Markdown?")])]) },function () { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'p\',[_vm._v("In my opinion, Markdown is a fantastic middle ground between writing markup (for example, HTML) and writing normal text. It allows you to express everything you might need in a blog post, like "),_c(\'em\',[_vm._v("italics")]),_vm._v(", "),_c(\'strong\',[_vm._v("emphasis")]),_vm._v(", "),_c(\'code\',{pre:true},[_vm._v("inline code")]),_vm._v(" and images with a very concise syntax.")]) },function () { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'pre\',{staticClass:"highlight",attrs:{"data-language":"md"}},[_c(\'code\',{pre:true},[_c(\'span\',{pre:true,attrs:{"class":"highlight__lines"}},[_c(\'span\',{pre:true,attrs:{"data-number":" 1"}}),_c(\'span\',{pre:true,attrs:{"data-number":" 2"}}),_c(\'span\',{pre:true,attrs:{"data-number":" 3"}}),_c(\'span\',{pre:true,attrs:{"data-number":" 4"}}),_c(\'span\',{pre:true,attrs:{"data-number":" 5"}})]),_c(\'span\',{pre:true,attrs:{"class":"highlight__code"}},[_c(\'span\',{pre:true,attrs:{"class":"highlight__section"}},[_vm._v("# An Example Blog Post")]),_vm._v("\\n\\nMay look something like this. It\'s easy to "),_c(\'span\',{pre:true,attrs:{"class":"highlight__strong"}},[_vm._v("**emphasise**")]),_vm._v(" words, link to ["),_c(\'span\',{pre:true,attrs:{"class":"highlight__string"}},[_vm._v("other sites")]),_vm._v("]("),_c(\'span\',{pre:true,attrs:{"class":"highlight__link"}},[_vm._v("https://gregiv.es")]),_vm._v("), write "),_c(\'span\',{pre:true,attrs:{"class":"highlight__code"}},[_vm._v("`inline code`")]),_vm._v(" or standalone code blocks, and add images.\\n\\n!["),_c(\'span\',{pre:true,attrs:{"class":"highlight__string"}},[_vm._v("Smiley face for Markdown")]),_vm._v("]("),_c(\'span\',{pre:true,attrs:{"class":"highlight__link"}},[_vm._v("smiley.gif")]),_vm._v(")\\n")])])]) },function () { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'h2\',{attrs:{"id":"loading-markdown-files","tabindex":"-1"}},[_c(\'a\',{staticClass:"header-anchor",attrs:{"href":"#loading-markdown-files"}},[_vm._v("Loading Markdown Files")])]) },function () { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'p\',[_vm._v("In order to load Markdown files into Nuxt, we need to use a webpack loader. A webpack loader simply preprocesses a file, of a given type, to allow us to include it into our application. Conveniently, "),_c(\'code\',{pre:true},[_vm._v("frontmatter-markdown-loader")]),_vm._v(" does exactly what we want: it compiles our Markdown into HTML and then gives it to us "),_c(\'em\',[_vm._v("as a Vue render function")]),_vm._v(", including the front matter attributes from the top of the Markdown file. All we need to do is to tell webpack to use "),_c(\'code\',{pre:true},[_vm._v("frontmatter-markdown-loader")]),_vm._v(" whenever it sees a Markdown file, which we can do in "),_c(\'code\',{pre:true},[_vm._v("nuxt.config.js")]),_vm._v(".")]) },function () { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'pre\',{staticClass:"highlight",attrs:{"data-language":"js"}},[_c(\'code\',{pre:true},[_c(\'span\',{pre:true,attrs:{"class":"highlight__lines"}},[_c(\'span\',{pre:true,attrs:{"data-number":" 1","data-highlight":""}}),_c(\'span\',{pre:true,attrs:{"data-number":" 2"}}),_c(\'span\',{pre:true,attrs:{"data-number":" 3"}}),_c(\'span\',{pre:true,attrs:{"data-number":" 4"}}),_c(\'span\',{pre:true,attrs:{"data-number":" 5"}}),_c(\'span\',{pre:true,attrs:{"data-number":" 6","data-highlight":""}}),_c(\'span\',{pre:true,attrs:{"data-number":" 7","data-highlight":""}}),_c(\'span\',{pre:true,attrs:{"data-number":" 8","data-highlight":""}}),_c(\'span\',{pre:true,attrs:{"data-number":" 9","data-highlight":""}}),_c(\'span\',{pre:true,attrs:{"data-number":"10","data-highlight":""}}),_c(\'span\',{pre:true,attrs:{"data-number":"11","data-highlight":""}}),_c(\'span\',{pre:true,attrs:{"data-number":"12","data-highlight":""}}),_c(\'span\',{pre:true,attrs:{"data-number":"13","data-highlight":""}}),_c(\'span\',{pre:true,attrs:{"data-number":"14","data-highlight":""}}),_c(\'span\',{pre:true,attrs:{"data-number":"15","data-highlight":""}}),_c(\'span\',{pre:true,attrs:{"data-number":"16"}}),_c(\'span\',{pre:true,attrs:{"data-number":"17"}}),_c(\'span\',{pre:true,attrs:{"data-number":"18"}})]),_c(\'span\',{pre:true,attrs:{"class":"highlight__code"}},[_c(\'span\',{pre:true,attrs:{"class":"highlight__keyword"}},[_vm._v("import")]),_vm._v(" "),_c(\'span\',{pre:true,attrs:{"class":"highlight__title class_"}},[_vm._v("FMMode")]),_vm._v(" "),_c(\'span\',{pre:true,attrs:{"class":"highlight__keyword"}},[_vm._v("from")]),_vm._v(" "),_c(\'span\',{pre:true,attrs:{"class":"highlight__string"}},[_vm._v("\'frontmatter-markdown-loader/mode\'")]),_vm._v("\\n\\n"),_c(\'span\',{pre:true,attrs:{"class":"highlight__keyword"}},[_vm._v("export")]),_vm._v(" "),_c(\'span\',{pre:true,attrs:{"class":"highlight__keyword"}},[_vm._v("default")]),_vm._v(" {\\n  "),_c(\'span\',{pre:true,attrs:{"class":"highlight__attr"}},[_vm._v("build")]),_vm._v(": {\\n    "),_c(\'span\',{pre:true,attrs:{"class":"highlight__title function_"}},[_vm._v("extend")]),_vm._v("("),_c(\'span\',{pre:true,attrs:{"class":"highlight__params"}},[_vm._v("config")]),_vm._v(") {\\n      config."),_c(\'span\',{pre:true,attrs:{"class":"highlight__property"}},[_vm._v("module")]),_vm._v("."),_c(\'span\',{pre:true,attrs:{"class":"highlight__property"}},[_vm._v("rules")]),_vm._v("."),_c(\'span\',{pre:true,attrs:{"class":"highlight__title function_"}},[_vm._v("push")]),_vm._v("({\\n        "),_c(\'span\',{pre:true,attrs:{"class":"highlight__attr"}},[_vm._v("test")]),_vm._v(": "),_c(\'span\',{pre:true,attrs:{"class":"highlight__regexp"}},[_vm._v("/\\\\.md$/")]),_vm._v(",\\n        "),_c(\'span\',{pre:true,attrs:{"class":"highlight__attr"}},[_vm._v("loader")]),_vm._v(": "),_c(\'span\',{pre:true,attrs:{"class":"highlight__string"}},[_vm._v("\'frontmatter-markdown-loader\'")]),_vm._v(",\\n        "),_c(\'span\',{pre:true,attrs:{"class":"highlight__attr"}},[_vm._v("options")]),_vm._v(": {\\n          "),_c(\'span\',{pre:true,attrs:{"class":"highlight__attr"}},[_vm._v("mode")]),_vm._v(": ["),_c(\'span\',{pre:true,attrs:{"class":"highlight__title class_"}},[_vm._v("FMMode")]),_vm._v("."),_c(\'span\',{pre:true,attrs:{"class":"highlight__property"}},[_vm._v("VUE_RENDER_FUNCTIONS")]),_vm._v("],\\n          "),_c(\'span\',{pre:true,attrs:{"class":"highlight__attr"}},[_vm._v("vue")]),_vm._v(": {\\n            "),_c(\'span\',{pre:true,attrs:{"class":"highlight__attr"}},[_vm._v("root")]),_vm._v(": "),_c(\'span\',{pre:true,attrs:{"class":"highlight__string"}},[_vm._v("\'markdown\'")]),_vm._v(" "),_c(\'span\',{pre:true,attrs:{"class":"highlight__comment"}},[_vm._v("// The class name of the root div")]),_vm._v("\\n          }\\n        }\\n      })\\n    }\\n  }\\n}\\n")])])]) },function () { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'p\',[_vm._v("By default, "),_c(\'code\',{pre:true},[_vm._v("frontmatter-markdown-loader")]),_vm._v(" uses "),_c(\'code\',{pre:true},[_vm._v("markdown-it")]),_vm._v(" to compile the Markdown. If you wish, you can pass your own options to "),_c(\'code\',{pre:true},[_vm._v("markdown-it")]),_vm._v(" or override the Markdown compilation completely with your Markdown compiler of choice, see "),_c(\'a\',{attrs:{"href":"https://hmsk.github.io/frontmatter-markdown-loader/options.html#markdown-compilation"}},[_vm._v("the documentation")]),_vm._v(" on how to do this.")]) },function () { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'h2\',{attrs:{"id":"a-markdown-component","tabindex":"-1"}},[_c(\'a\',{staticClass:"header-anchor",attrs:{"href":"#a-markdown-component"}},[_vm._v("A Markdown Component")])]) },function () { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'p\',[_vm._v("Now we have told webpack how to load Markdown files, we need some way to show them to the user! Let’s create a Markdown component, I’ve just called mine "),_c(\'code\',{pre:true},[_vm._v("Markdown.vue")]),_vm._v(" for ease, within your "),_c(\'code\',{pre:true},[_vm._v("components")]),_vm._v(" directory.")]) },function () { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'pre\',{staticClass:"highlight",attrs:{"data-language":"vue"}},[_c(\'code\',{pre:true},[_c(\'span\',{pre:true,attrs:{"class":"highlight__lines"}},[_c(\'span\',{pre:true,attrs:{"data-number":" 1"}}),_c(\'span\',{pre:true,attrs:{"data-number":" 2"}}),_c(\'span\',{pre:true,attrs:{"data-number":" 3"}}),_c(\'span\',{pre:true,attrs:{"data-number":" 4"}}),_c(\'span\',{pre:true,attrs:{"data-number":" 5"}}),_c(\'span\',{pre:true,attrs:{"data-number":" 6"}}),_c(\'span\',{pre:true,attrs:{"data-number":" 7"}}),_c(\'span\',{pre:true,attrs:{"data-number":" 8"}}),_c(\'span\',{pre:true,attrs:{"data-number":" 9"}}),_c(\'span\',{pre:true,attrs:{"data-number":"10"}}),_c(\'span\',{pre:true,attrs:{"data-number":"11"}}),_c(\'span\',{pre:true,attrs:{"data-number":"12"}}),_c(\'span\',{pre:true,attrs:{"data-number":"13"}}),_c(\'span\',{pre:true,attrs:{"data-number":"14"}}),_c(\'span\',{pre:true,attrs:{"data-number":"15"}}),_c(\'span\',{pre:true,attrs:{"data-number":"16"}}),_c(\'span\',{pre:true,attrs:{"data-number":"17"}}),_c(\'span\',{pre:true,attrs:{"data-number":"18"}}),_c(\'span\',{pre:true,attrs:{"data-number":"19"}}),_c(\'span\',{pre:true,attrs:{"data-number":"20"}}),_c(\'span\',{pre:true,attrs:{"data-number":"21"}}),_c(\'span\',{pre:true,attrs:{"data-number":"22"}}),_c(\'span\',{pre:true,attrs:{"data-number":"23"}}),_c(\'span\',{pre:true,attrs:{"data-number":"24"}}),_c(\'span\',{pre:true,attrs:{"data-number":"25"}}),_c(\'span\',{pre:true,attrs:{"data-number":"26"}}),_c(\'span\',{pre:true,attrs:{"data-number":"27"}})]),_c(\'span\',{pre:true,attrs:{"class":"highlight__code"}},[_c(\'span\',{pre:true,attrs:{"class":"highlight__tag"}},[_vm._v("<"),_c(\'span\',{pre:true,attrs:{"class":"highlight__name"}},[_vm._v("script")]),_vm._v(">")]),_c(\'span\',{pre:true,attrs:{"class":"language-javascript"}},[_vm._v("\\n"),_c(\'span\',{pre:true,attrs:{"class":"highlight__keyword"}},[_vm._v("export")]),_vm._v(" "),_c(\'span\',{pre:true,attrs:{"class":"highlight__keyword"}},[_vm._v("default")]),_vm._v(" {\\n  "),_c(\'span\',{pre:true,attrs:{"class":"highlight__attr"}},[_vm._v("props")]),_vm._v(": {\\n    "),_c(\'span\',{pre:true,attrs:{"class":"highlight__attr"}},[_vm._v("markdown")]),_vm._v(": {\\n      "),_c(\'span\',{pre:true,attrs:{"class":"highlight__attr"}},[_vm._v("type")]),_vm._v(": "),_c(\'span\',{pre:true,attrs:{"class":"highlight__title class_"}},[_vm._v("Object")]),_vm._v(",\\n      "),_c(\'span\',{pre:true,attrs:{"class":"highlight__attr"}},[_vm._v("required")]),_vm._v(": "),_c(\'span\',{pre:true,attrs:{"class":"highlight__literal"}},[_vm._v("true")]),_vm._v("\\n    }\\n  },\\n  "),_c(\'span\',{pre:true,attrs:{"class":"highlight__title function_"}},[_vm._v("created")]),_vm._v("("),_c(\'span\',{pre:true,attrs:{"class":"highlight__params"}}),_vm._v(") {\\n    "),_c(\'span\',{pre:true,attrs:{"class":"highlight__comment"}},[_vm._v("// eslint-disable-next-line no-new-func")]),_vm._v("\\n    "),_c(\'span\',{pre:true,attrs:{"class":"highlight__variable language_"}},[_vm._v("this")]),_vm._v("."),_c(\'span\',{pre:true,attrs:{"class":"highlight__property"}},[_vm._v("templateRender")]),_vm._v(" = "),_c(\'span\',{pre:true,attrs:{"class":"highlight__keyword"}},[_vm._v("new")]),_vm._v(" "),_c(\'span\',{pre:true,attrs:{"class":"highlight__title class_"}},[_vm._v("Function")]),_vm._v("("),_c(\'span\',{pre:true,attrs:{"class":"highlight__variable language_"}},[_vm._v("this")]),_vm._v("."),_c(\'span\',{pre:true,attrs:{"class":"highlight__property"}},[_vm._v("markdown")]),_vm._v("."),_c(\'span\',{pre:true,attrs:{"class":"highlight__property"}},[_vm._v("vue")]),_vm._v("."),_c(\'span\',{pre:true,attrs:{"class":"highlight__property"}},[_vm._v("render")]),_vm._v(")()\\n    "),_c(\'span\',{pre:true,attrs:{"class":"highlight__comment"}},[_vm._v("// eslint-disable-next-line no-new-func")]),_vm._v("\\n    "),_c(\'span\',{pre:true,attrs:{"class":"highlight__variable language_"}},[_vm._v("this")]),_vm._v("."),_c(\'span\',{pre:true,attrs:{"class":"highlight__property"}},[_vm._v("$options")]),_vm._v("."),_c(\'span\',{pre:true,attrs:{"class":"highlight__property"}},[_vm._v("staticRenderFns")]),_vm._v(" = "),_c(\'span\',{pre:true,attrs:{"class":"highlight__keyword"}},[_vm._v("new")]),_vm._v(" "),_c(\'span\',{pre:true,attrs:{"class":"highlight__title class_"}},[_vm._v("Function")]),_vm._v("(\\n      "),_c(\'span\',{pre:true,attrs:{"class":"highlight__variable language_"}},[_vm._v("this")]),_vm._v("."),_c(\'span\',{pre:true,attrs:{"class":"highlight__property"}},[_vm._v("markdown")]),_vm._v("."),_c(\'span\',{pre:true,attrs:{"class":"highlight__property"}},[_vm._v("vue")]),_vm._v("."),_c(\'span\',{pre:true,attrs:{"class":"highlight__property"}},[_vm._v("staticRenderFns")]),_vm._v("\\n    )()\\n  },\\n  "),_c(\'span\',{pre:true,attrs:{"class":"highlight__title function_"}},[_vm._v("render")]),_vm._v("("),_c(\'span\',{pre:true,attrs:{"class":"highlight__params"}},[_vm._v("h")]),_vm._v(") {\\n    "),_c(\'span\',{pre:true,attrs:{"class":"highlight__keyword"}},[_vm._v("return")]),_vm._v(" "),_c(\'span\',{pre:true,attrs:{"class":"highlight__variable language_"}},[_vm._v("this")]),_vm._v("."),_c(\'span\',{pre:true,attrs:{"class":"highlight__property"}},[_vm._v("templateRender")]),_vm._v(" ? "),_c(\'span\',{pre:true,attrs:{"class":"highlight__variable language_"}},[_vm._v("this")]),_vm._v("."),_c(\'span\',{pre:true,attrs:{"class":"highlight__title function_"}},[_vm._v("templateRender")]),_vm._v("() : "),_c(\'span\',{pre:true,attrs:{"class":"highlight__title function_"}},[_vm._v("h")]),_vm._v("("),_c(\'span\',{pre:true,attrs:{"class":"highlight__string"}},[_vm._v("\'div\'")]),_vm._v(")\\n  }\\n}\\n")]),_c(\'span\',{pre:true,attrs:{"class":"highlight__tag"}},[_vm._v("</"),_c(\'span\',{pre:true,attrs:{"class":"highlight__name"}},[_vm._v("script")]),_vm._v(">")]),_vm._v("\\n\\n"),_c(\'span\',{pre:true,attrs:{"class":"highlight__tag"}},[_vm._v("<"),_c(\'span\',{pre:true,attrs:{"class":"highlight__name"}},[_vm._v("style")]),_vm._v(">")]),_c(\'span\',{pre:true,attrs:{"class":"language-css"}},[_vm._v("\\n"),_c(\'span\',{pre:true,attrs:{"class":"highlight__selector-class"}},[_vm._v(".markdown")]),_vm._v(" {\\n  "),_c(\'span\',{pre:true,attrs:{"class":"highlight__comment"}},[_vm._v("/* Put your Markdown styles here */")]),_vm._v("\\n}\\n")]),_c(\'span\',{pre:true,attrs:{"class":"highlight__tag"}},[_vm._v("</"),_c(\'span\',{pre:true,attrs:{"class":"highlight__name"}},[_vm._v("style")]),_vm._v(">")]),_vm._v("\\n")])])]) },function () { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'p\',[_vm._v("If you’re new to Vue, you might be surprised to see that our Markdown component doesn’t have a "),_c(\'code\',{pre:true},[_vm._v("<template>")]),_vm._v(" at the top. Instead of this, we have a "),_c(\'code\',{pre:true},[_vm._v("render")]),_vm._v(" function on the component which is used to render the HTML — behind the scenes, Vue converts all templates into render functions anyway. The render function takes a single argument, which is used to create elements. It’s convention "),_c(\'a\',{attrs:{"href":"https://css-tricks.com/what-does-the-h-stand-for-in-vues-render-method/"}},[_vm._v("to name this parameter "),_c(\'code\',{pre:true},[_vm._v("h")])]),_vm._v(", but it can be thought of as "),_c(\'code\',{pre:true},[_vm._v("createElement")]),_vm._v(".")]) },function () { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'p\',[_vm._v("Our Markdown component has a single required prop, a "),_c(\'code\',{pre:true},[_vm._v("markdown")]),_vm._v(" object, which contains the render functions exposed by "),_c(\'code\',{pre:true},[_vm._v("frontmatter-markdown-loader")]),_vm._v(". These functions are actually passed as strings, so when the component is created we turn these back into functions by using "),_c(\'code\',{pre:true},[_vm._v("new Function()")]),_vm._v(". Note I’ve added two comments for ESLint above these lines, as "),_c(\'a\',{attrs:{"href":"https://eslint.org/docs/rules/no-new-func"}},[_vm._v("it’s considered bad practice to create functions in this way")]),_vm._v(", but this is a valid case.")]) },function () { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'h2\',{attrs:{"id":"writing-your-blog-posts","tabindex":"-1"}},[_c(\'a\',{staticClass:"header-anchor",attrs:{"href":"#writing-your-blog-posts"}},[_vm._v("Writing Your Blog Posts")])]) },function () { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'p\',[_vm._v("Now it’s time to write your first blog post and let Nuxt know that you’ve written one. Create a new directory in the root of your project called "),_c(\'code\',{pre:true},[_vm._v("contents")]),_vm._v(" and then create a Markdown file in there called "),_c(\'code\',{pre:true},[_vm._v("my-first-blog-post.md")]),_vm._v(". At the start of the Markdown file, we’re going to write some front matter, which is just some extra information about our blog post, such as the date and title. Front matter is always placed at the top of the file and is denoted by the "),_c(\'code\',{pre:true},[_vm._v("---")]),_vm._v(" three dashes. You can also put Vue components in your Markdown files, because we’re using Vue render functions, to give your blog posts special powers!")]) },function () { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'pre\',{staticClass:"highlight",attrs:{"data-language":"md"}},[_c(\'code\',{pre:true},[_c(\'span\',{pre:true,attrs:{"class":"highlight__lines"}},[_c(\'span\',{pre:true,attrs:{"data-number":" 1"}}),_c(\'span\',{pre:true,attrs:{"data-number":" 2"}}),_c(\'span\',{pre:true,attrs:{"data-number":" 3"}}),_c(\'span\',{pre:true,attrs:{"data-number":" 4"}}),_c(\'span\',{pre:true,attrs:{"data-number":" 5"}}),_c(\'span\',{pre:true,attrs:{"data-number":" 6"}}),_c(\'span\',{pre:true,attrs:{"data-number":" 7"}}),_c(\'span\',{pre:true,attrs:{"data-number":" 8"}})]),_c(\'span\',{pre:true,attrs:{"class":"highlight__code"}},[_vm._v("---\\ndate: 2015-10-21\\n"),_c(\'span\',{pre:true,attrs:{"class":"highlight__section"}},[_vm._v("title: My First Blog Post\\n---")]),_vm._v("\\n\\nWho moved my cheese cow mascarpone. Cheese on toast cheese on toast mozzarella bavarian bergkase emmental gouda cheese triangles. Croque monsieur dolcelatte macaroni cheese taleggio parmesan cheese triangles St. Agur blue cheese. Everyone loves cheese.\\n\\n"),_c(\'span\',{pre:true,attrs:{"class":"language-xml"}},[_c(\'span\',{pre:true,attrs:{"class":"highlight__tag"}},[_vm._v("<"),_c(\'span\',{pre:true,attrs:{"class":"highlight__name"}},[_vm._v("cheese-slideshow")]),_vm._v(">")])]),_c(\'span\',{pre:true,attrs:{"class":"language-xml"}},[_c(\'span\',{pre:true,attrs:{"class":"highlight__tag"}},[_vm._v("</"),_c(\'span\',{pre:true,attrs:{"class":"highlight__name"}},[_vm._v("cheese-slideshow")]),_vm._v(">")])]),_vm._v("\\n")])])]) },function () { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'p\',[_vm._v("In the "),_c(\'code\',{pre:true},[_vm._v("contents")]),_vm._v(" directory, we’re also going to create an "),_c(\'code\',{pre:true},[_vm._v("index.js")]),_vm._v(" JavaScript file. We’ll use this file to let Nuxt know which blog posts we want to generate a page for, and the route corresponding to the pages.")]) },function () { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'pre\',{staticClass:"highlight",attrs:{"data-language":"js"}},[_c(\'code\',{pre:true},[_c(\'span\',{pre:true,attrs:{"class":"highlight__lines"}},[_c(\'span\',{pre:true,attrs:{"data-number":" 1"}}),_c(\'span\',{pre:true,attrs:{"data-number":" 2"}})]),_c(\'span\',{pre:true,attrs:{"class":"highlight__code"}},[_c(\'span\',{pre:true,attrs:{"class":"highlight__keyword"}},[_vm._v("export")]),_vm._v(" "),_c(\'span\',{pre:true,attrs:{"class":"highlight__keyword"}},[_vm._v("const")]),_vm._v(" postSlugs = ["),_c(\'span\',{pre:true,attrs:{"class":"highlight__string"}},[_vm._v("\'my-first-blog-post\'")]),_vm._v("]\\n"),_c(\'span\',{pre:true,attrs:{"class":"highlight__keyword"}},[_vm._v("export")]),_vm._v(" "),_c(\'span\',{pre:true,attrs:{"class":"highlight__keyword"}},[_vm._v("const")]),_vm._v(" postRoutes = postSlugs."),_c(\'span\',{pre:true,attrs:{"class":"highlight__title function_"}},[_vm._v("map")]),_vm._v("("),_c(\'span\',{pre:true,attrs:{"class":"highlight__function"}},[_vm._v("("),_c(\'span\',{pre:true,attrs:{"class":"highlight__params"}},[_vm._v("postSlug")]),_vm._v(") =>")]),_vm._v(" "),_c(\'span\',{pre:true,attrs:{"class":"highlight__string"}},[_vm._v("`/blog/"),_c(\'span\',{pre:true,attrs:{"class":"highlight__subst"}},[_vm._v("${postSlug}")]),_vm._v("`")]),_vm._v(")\\n")])])]) },function () { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'h3\',{attrs:{"id":"nuxt-configuration","tabindex":"-1"}},[_c(\'a\',{staticClass:"header-anchor",attrs:{"href":"#nuxt-configuration"}},[_vm._v("Nuxt Configuration")])]) },function () { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'p\',[_vm._v("We need to change the configuration of Nuxt slightly, to let it know about our blog posts. This is because the pages for our blog posts will be generated "),_c(\'em\',[_vm._v("dynamically")]),_vm._v(", i.e. we’re not manually creating a page for each of them. In "),_c(\'code\',{pre:true},[_vm._v("nuxt.config.js")]),_vm._v(", we’re going to import the routes for our blog posts at the top, and then pass them to "),_c(\'code\',{pre:true},[_vm._v("generate.routes")]),_vm._v(". This ensures that Nuxt will generate these pages when we run "),_c(\'code\',{pre:true},[_vm._v("nuxt generate")]),_vm._v(".")]) },function () { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'pre\',{staticClass:"highlight",attrs:{"data-language":"js"}},[_c(\'code\',{pre:true},[_c(\'span\',{pre:true,attrs:{"class":"highlight__lines"}},[_c(\'span\',{pre:true,attrs:{"data-number":" 1","data-highlight":""}}),_c(\'span\',{pre:true,attrs:{"data-number":" 2"}}),_c(\'span\',{pre:true,attrs:{"data-number":" 3"}}),_c(\'span\',{pre:true,attrs:{"data-number":" 4","data-highlight":""}}),_c(\'span\',{pre:true,attrs:{"data-number":" 5","data-highlight":""}}),_c(\'span\',{pre:true,attrs:{"data-number":" 6","data-highlight":""}}),_c(\'span\',{pre:true,attrs:{"data-number":" 7"}})]),_c(\'span\',{pre:true,attrs:{"class":"highlight__code"}},[_c(\'span\',{pre:true,attrs:{"class":"highlight__keyword"}},[_vm._v("import")]),_vm._v(" { postRoutes } "),_c(\'span\',{pre:true,attrs:{"class":"highlight__keyword"}},[_vm._v("from")]),_vm._v(" "),_c(\'span\',{pre:true,attrs:{"class":"highlight__string"}},[_vm._v("\'./contents\'")]),_vm._v("\\n\\n"),_c(\'span\',{pre:true,attrs:{"class":"highlight__keyword"}},[_vm._v("export")]),_vm._v(" "),_c(\'span\',{pre:true,attrs:{"class":"highlight__keyword"}},[_vm._v("default")]),_vm._v(" {\\n  "),_c(\'span\',{pre:true,attrs:{"class":"highlight__attr"}},[_vm._v("generate")]),_vm._v(": {\\n    "),_c(\'span\',{pre:true,attrs:{"class":"highlight__attr"}},[_vm._v("routes")]),_vm._v(": postRoutes\\n  }\\n}\\n")])])]) },function () { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'h2\',{attrs:{"id":"creating-the-blog-pages","tabindex":"-1"}},[_c(\'a\',{staticClass:"header-anchor",attrs:{"href":"#creating-the-blog-pages"}},[_vm._v("Creating the Blog Pages")])]) },function () { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'p\',[_vm._v("Finally, we need to actually create the pages for our blog. Let’s create a new directory in the "),_c(\'code\',{pre:true},[_vm._v("pages")]),_vm._v(" directory called "),_c(\'code\',{pre:true},[_vm._v("blog")]),_vm._v(" and in this we’ll create two pages: "),_c(\'code\',{pre:true},[_vm._v("index.vue")]),_vm._v(" to list the blog posts and "),_c(\'code\',{pre:true},[_vm._v("_post.vue")]),_vm._v(" for the individual blog posts. Note that any dynamic page "),_c(\'strong\',[_vm._v("must be prefixed by an underscore")]),_vm._v(".")]) },function () { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'h3\',{attrs:{"id":"listing-your-blog-posts","tabindex":"-1"}},[_c(\'a\',{staticClass:"header-anchor",attrs:{"href":"#listing-your-blog-posts"}},[_vm._v("Listing Your Blog Posts")])]) },function () { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'p\',[_vm._v("In "),_c(\'code\',{pre:true},[_vm._v("index.vue")]),_vm._v(", we’re going to use "),_c(\'code\',{pre:true},[_vm._v("asyncData")]),_vm._v(" to load the blog posts before the component is created. We’ll map over the "),_c(\'code\',{pre:true},[_vm._v("postSlugs")]),_vm._v(" array which we exported earlier, importing each blog post; this will use "),_c(\'code\',{pre:true},[_vm._v("frontmatter-markdown-loader")]),_vm._v(" which we also set up earlier. In this page, we only need the attributes of each blog post so we’ll return just the attributes and then sort the posts depending on their date.")]) },function () { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'pre\',{staticClass:"highlight",attrs:{"data-language":"vue"}},[_c(\'code\',{pre:true},[_c(\'span\',{pre:true,attrs:{"class":"highlight__lines"}},[_c(\'span\',{pre:true,attrs:{"data-number":" 1"}}),_c(\'span\',{pre:true,attrs:{"data-number":" 2"}}),_c(\'span\',{pre:true,attrs:{"data-number":" 3"}}),_c(\'span\',{pre:true,attrs:{"data-number":" 4"}}),_c(\'span\',{pre:true,attrs:{"data-number":" 5"}}),_c(\'span\',{pre:true,attrs:{"data-number":" 6"}}),_c(\'span\',{pre:true,attrs:{"data-number":" 7"}}),_c(\'span\',{pre:true,attrs:{"data-number":" 8"}}),_c(\'span\',{pre:true,attrs:{"data-number":" 9"}}),_c(\'span\',{pre:true,attrs:{"data-number":"10"}}),_c(\'span\',{pre:true,attrs:{"data-number":"11"}}),_c(\'span\',{pre:true,attrs:{"data-number":"12"}}),_c(\'span\',{pre:true,attrs:{"data-number":"13"}}),_c(\'span\',{pre:true,attrs:{"data-number":"14"}}),_c(\'span\',{pre:true,attrs:{"data-number":"15"}}),_c(\'span\',{pre:true,attrs:{"data-number":"16"}}),_c(\'span\',{pre:true,attrs:{"data-number":"17"}}),_c(\'span\',{pre:true,attrs:{"data-number":"18"}}),_c(\'span\',{pre:true,attrs:{"data-number":"19"}}),_c(\'span\',{pre:true,attrs:{"data-number":"20"}}),_c(\'span\',{pre:true,attrs:{"data-number":"21"}}),_c(\'span\',{pre:true,attrs:{"data-number":"22"}}),_c(\'span\',{pre:true,attrs:{"data-number":"23"}}),_c(\'span\',{pre:true,attrs:{"data-number":"24"}}),_c(\'span\',{pre:true,attrs:{"data-number":"25"}}),_c(\'span\',{pre:true,attrs:{"data-number":"26"}}),_c(\'span\',{pre:true,attrs:{"data-number":"27"}}),_c(\'span\',{pre:true,attrs:{"data-number":"28"}}),_c(\'span\',{pre:true,attrs:{"data-number":"29"}}),_c(\'span\',{pre:true,attrs:{"data-number":"30"}}),_c(\'span\',{pre:true,attrs:{"data-number":"31"}}),_c(\'span\',{pre:true,attrs:{"data-number":"32"}}),_c(\'span\',{pre:true,attrs:{"data-number":"33"}}),_c(\'span\',{pre:true,attrs:{"data-number":"34"}}),_c(\'span\',{pre:true,attrs:{"data-number":"35"}})]),_c(\'span\',{pre:true,attrs:{"class":"highlight__code"}},[_c(\'span\',{pre:true,attrs:{"class":"highlight__tag"}},[_vm._v("<"),_c(\'span\',{pre:true,attrs:{"class":"highlight__name"}},[_vm._v("template")]),_vm._v(">")]),_vm._v("\\n  "),_c(\'span\',{pre:true,attrs:{"class":"highlight__tag"}},[_vm._v("<"),_c(\'span\',{pre:true,attrs:{"class":"highlight__name"}},[_vm._v("main")]),_vm._v(">")]),_vm._v("\\n    "),_c(\'span\',{pre:true,attrs:{"class":"highlight__tag"}},[_vm._v("<"),_c(\'span\',{pre:true,attrs:{"class":"highlight__name"}},[_vm._v("h1")]),_vm._v(">")]),_vm._v("My Blog"),_c(\'span\',{pre:true,attrs:{"class":"highlight__tag"}},[_vm._v("</"),_c(\'span\',{pre:true,attrs:{"class":"highlight__name"}},[_vm._v("h1")]),_vm._v(">")]),_vm._v("\\n    "),_c(\'span\',{pre:true,attrs:{"class":"highlight__tag"}},[_vm._v("<"),_c(\'span\',{pre:true,attrs:{"class":"highlight__name"}},[_vm._v("ol")]),_vm._v(">")]),_vm._v("\\n      "),_c(\'span\',{pre:true,attrs:{"class":"highlight__tag"}},[_vm._v("<"),_c(\'span\',{pre:true,attrs:{"class":"highlight__name"}},[_vm._v("li")]),_vm._v(" "),_c(\'span\',{pre:true,attrs:{"class":"highlight__attr"}},[_vm._v("v-for")]),_vm._v("="),_c(\'span\',{pre:true,attrs:{"class":"highlight__string"}},[_vm._v("\\"post in posts\\"")]),_vm._v(" "),_c(\'span\',{pre:true,attrs:{"class":"highlight__attr"}},[_vm._v(":key")]),_vm._v("="),_c(\'span\',{pre:true,attrs:{"class":"highlight__string"}},[_vm._v("\\"post.title\\"")]),_vm._v(">")]),_vm._v("\\n        "),_c(\'span\',{pre:true,attrs:{"class":"highlight__tag"}},[_vm._v("<"),_c(\'span\',{pre:true,attrs:{"class":"highlight__name"}},[_vm._v("nuxt-link")]),_vm._v(" "),_c(\'span\',{pre:true,attrs:{"class":"highlight__attr"}},[_vm._v(":to")]),_vm._v("="),_c(\'span\',{pre:true,attrs:{"class":"highlight__string"}},[_vm._v("\\"`/blog/${post.slug}`\\"")]),_vm._v(">")]),_vm._v("\\n          {{ post.title }}\\n        "),_c(\'span\',{pre:true,attrs:{"class":"highlight__tag"}},[_vm._v("</"),_c(\'span\',{pre:true,attrs:{"class":"highlight__name"}},[_vm._v("nuxt-link")]),_vm._v(">")]),_vm._v("\\n        - {{ post.date.toLocaleDateString() }}\\n      "),_c(\'span\',{pre:true,attrs:{"class":"highlight__tag"}},[_vm._v("</"),_c(\'span\',{pre:true,attrs:{"class":"highlight__name"}},[_vm._v("li")]),_vm._v(">")]),_vm._v("\\n    "),_c(\'span\',{pre:true,attrs:{"class":"highlight__tag"}},[_vm._v("</"),_c(\'span\',{pre:true,attrs:{"class":"highlight__name"}},[_vm._v("ol")]),_vm._v(">")]),_vm._v("\\n  "),_c(\'span\',{pre:true,attrs:{"class":"highlight__tag"}},[_vm._v("</"),_c(\'span\',{pre:true,attrs:{"class":"highlight__name"}},[_vm._v("main")]),_vm._v(">")]),_vm._v("\\n"),_c(\'span\',{pre:true,attrs:{"class":"highlight__tag"}},[_vm._v("</"),_c(\'span\',{pre:true,attrs:{"class":"highlight__name"}},[_vm._v("template")]),_vm._v(">")]),_vm._v("\\n\\n"),_c(\'span\',{pre:true,attrs:{"class":"highlight__tag"}},[_vm._v("<"),_c(\'span\',{pre:true,attrs:{"class":"highlight__name"}},[_vm._v("script")]),_vm._v(">")]),_c(\'span\',{pre:true,attrs:{"class":"language-javascript"}},[_vm._v("\\n"),_c(\'span\',{pre:true,attrs:{"class":"highlight__keyword"}},[_vm._v("import")]),_vm._v(" { postSlugs } "),_c(\'span\',{pre:true,attrs:{"class":"highlight__keyword"}},[_vm._v("from")]),_vm._v(" "),_c(\'span\',{pre:true,attrs:{"class":"highlight__string"}},[_vm._v("\'~/contents\'")]),_vm._v("\\n\\n"),_c(\'span\',{pre:true,attrs:{"class":"highlight__keyword"}},[_vm._v("export")]),_vm._v(" "),_c(\'span\',{pre:true,attrs:{"class":"highlight__keyword"}},[_vm._v("default")]),_vm._v(" {\\n  "),_c(\'span\',{pre:true,attrs:{"class":"highlight__keyword"}},[_vm._v("async")]),_vm._v(" "),_c(\'span\',{pre:true,attrs:{"class":"highlight__title function_"}},[_vm._v("asyncData")]),_vm._v("("),_c(\'span\',{pre:true,attrs:{"class":"highlight__params"}}),_vm._v(") {\\n    "),_c(\'span\',{pre:true,attrs:{"class":"highlight__keyword"}},[_vm._v("const")]),_vm._v(" posts = "),_c(\'span\',{pre:true,attrs:{"class":"highlight__keyword"}},[_vm._v("await")]),_vm._v(" "),_c(\'span\',{pre:true,attrs:{"class":"highlight__title class_"}},[_vm._v("Promise")]),_vm._v("."),_c(\'span\',{pre:true,attrs:{"class":"highlight__title function_"}},[_vm._v("all")]),_vm._v("(\\n      postSlugs."),_c(\'span\',{pre:true,attrs:{"class":"highlight__title function_"}},[_vm._v("map")]),_vm._v("("),_c(\'span\',{pre:true,attrs:{"class":"highlight__keyword"}},[_vm._v("async")]),_vm._v(" (postSlug) => {\\n        "),_c(\'span\',{pre:true,attrs:{"class":"highlight__keyword"}},[_vm._v("const")]),_vm._v(" post = "),_c(\'span\',{pre:true,attrs:{"class":"highlight__keyword"}},[_vm._v("await")]),_vm._v(" "),_c(\'span\',{pre:true,attrs:{"class":"highlight__title function_"}},[_vm._v("import")]),_vm._v("("),_c(\'span\',{pre:true,attrs:{"class":"highlight__string"}},[_vm._v("`~/contents/"),_c(\'span\',{pre:true,attrs:{"class":"highlight__subst"}},[_vm._v("${postSlug}")]),_vm._v(".md`")]),_vm._v(")\\n        post."),_c(\'span\',{pre:true,attrs:{"class":"highlight__property"}},[_vm._v("attributes")]),_vm._v("."),_c(\'span\',{pre:true,attrs:{"class":"highlight__property"}},[_vm._v("date")]),_vm._v(" = "),_c(\'span\',{pre:true,attrs:{"class":"highlight__keyword"}},[_vm._v("new")]),_vm._v(" "),_c(\'span\',{pre:true,attrs:{"class":"highlight__title class_"}},[_vm._v("Date")]),_vm._v("(post."),_c(\'span\',{pre:true,attrs:{"class":"highlight__property"}},[_vm._v("attributes")]),_vm._v("."),_c(\'span\',{pre:true,attrs:{"class":"highlight__property"}},[_vm._v("date")]),_vm._v(")\\n\\n        "),_c(\'span\',{pre:true,attrs:{"class":"highlight__keyword"}},[_vm._v("return")]),_vm._v(" post."),_c(\'span\',{pre:true,attrs:{"class":"highlight__property"}},[_vm._v("attributes")]),_vm._v("\\n      })\\n    )\\n    posts."),_c(\'span\',{pre:true,attrs:{"class":"highlight__title function_"}},[_vm._v("sort")]),_vm._v("("),_c(\'span\',{pre:true,attrs:{"class":"highlight__function"}},[_vm._v("("),_c(\'span\',{pre:true,attrs:{"class":"highlight__params"}},[_vm._v("postA, postB")]),_vm._v(") =>")]),_vm._v(" postB."),_c(\'span\',{pre:true,attrs:{"class":"highlight__property"}},[_vm._v("date")]),_vm._v(" - postA."),_c(\'span\',{pre:true,attrs:{"class":"highlight__property"}},[_vm._v("date")]),_vm._v(")\\n\\n    "),_c(\'span\',{pre:true,attrs:{"class":"highlight__keyword"}},[_vm._v("return")]),_vm._v(" {\\n      posts\\n    }\\n  }\\n}\\n")]),_c(\'span\',{pre:true,attrs:{"class":"highlight__tag"}},[_vm._v("</"),_c(\'span\',{pre:true,attrs:{"class":"highlight__name"}},[_vm._v("script")]),_vm._v(">")]),_vm._v("\\n")])])]) },function () { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'h3\',{attrs:{"id":"showing-an-individual-blog-post","tabindex":"-1"}},[_c(\'a\',{staticClass:"header-anchor",attrs:{"href":"#showing-an-individual-blog-post"}},[_vm._v("Showing an Individual Blog Post")])]) },function () { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'p\',[_vm._v("The last thing we need to do is create the page for the individual blog posts, the content itself! In a dynamic route such as "),_c(\'code\',{pre:true},[_vm._v("_post.vue")]),_vm._v(", the route parameters are passed into the context of "),_c(\'code\',{pre:true},[_vm._v("asyncData")]),_vm._v(": we can access the slug of our post ("),_c(\'code\',{pre:true},[_vm._v("my-first-blog-post")]),_vm._v(") using "),_c(\'code\',{pre:true},[_vm._v("params.post")]),_vm._v(". If you named your dynamic route "),_c(\'code\',{pre:true},[_vm._v("_slug.vue")]),_vm._v(" instead, then you would access the route as "),_c(\'code\',{pre:true},[_vm._v("params.slug")]),_vm._v(".")]) },function () { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'p\',[_vm._v("When we have the slug of the blog post, we’re going to import the corresponding Markdown file, again which will be loaded using "),_c(\'code\',{pre:true},[_vm._v("frontmatter-markdown-loader")]),_vm._v(". Note that if the user has requested a blog post which doesn’t exist, for example "),_c(\'code\',{pre:true},[_vm._v("/blog/non-existent-blog-post")]),_vm._v(", this would try to load "),_c(\'code\',{pre:true},[_vm._v("contents/non-existent-blog-post.md")]),_vm._v(" which would error. We need to catch this error and instead render the error page by calling "),_c(\'code\',{pre:true},[_vm._v("error()")]),_vm._v(" with the status code and error message.")]) },function () { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'pre\',{staticClass:"highlight",attrs:{"data-language":"vue"}},[_c(\'code\',{pre:true},[_c(\'span\',{pre:true,attrs:{"class":"highlight__lines"}},[_c(\'span\',{pre:true,attrs:{"data-number":" 1"}}),_c(\'span\',{pre:true,attrs:{"data-number":" 2"}}),_c(\'span\',{pre:true,attrs:{"data-number":" 3"}}),_c(\'span\',{pre:true,attrs:{"data-number":" 4"}}),_c(\'span\',{pre:true,attrs:{"data-number":" 5"}}),_c(\'span\',{pre:true,attrs:{"data-number":" 6"}}),_c(\'span\',{pre:true,attrs:{"data-number":" 7"}}),_c(\'span\',{pre:true,attrs:{"data-number":" 8"}}),_c(\'span\',{pre:true,attrs:{"data-number":" 9"}}),_c(\'span\',{pre:true,attrs:{"data-number":"10"}}),_c(\'span\',{pre:true,attrs:{"data-number":"11"}}),_c(\'span\',{pre:true,attrs:{"data-number":"12"}}),_c(\'span\',{pre:true,attrs:{"data-number":"13"}}),_c(\'span\',{pre:true,attrs:{"data-number":"14"}}),_c(\'span\',{pre:true,attrs:{"data-number":"15"}}),_c(\'span\',{pre:true,attrs:{"data-number":"16"}}),_c(\'span\',{pre:true,attrs:{"data-number":"17"}}),_c(\'span\',{pre:true,attrs:{"data-number":"18"}}),_c(\'span\',{pre:true,attrs:{"data-number":"19"}}),_c(\'span\',{pre:true,attrs:{"data-number":"20"}}),_c(\'span\',{pre:true,attrs:{"data-number":"21"}}),_c(\'span\',{pre:true,attrs:{"data-number":"22"}}),_c(\'span\',{pre:true,attrs:{"data-number":"23"}}),_c(\'span\',{pre:true,attrs:{"data-number":"24"}}),_c(\'span\',{pre:true,attrs:{"data-number":"25"}}),_c(\'span\',{pre:true,attrs:{"data-number":"26"}}),_c(\'span\',{pre:true,attrs:{"data-number":"27"}}),_c(\'span\',{pre:true,attrs:{"data-number":"28"}}),_c(\'span\',{pre:true,attrs:{"data-number":"29"}}),_c(\'span\',{pre:true,attrs:{"data-number":"30"}}),_c(\'span\',{pre:true,attrs:{"data-number":"31"}}),_c(\'span\',{pre:true,attrs:{"data-number":"32"}}),_c(\'span\',{pre:true,attrs:{"data-number":"33"}}),_c(\'span\',{pre:true,attrs:{"data-number":"34"}})]),_c(\'span\',{pre:true,attrs:{"class":"highlight__code"}},[_c(\'span\',{pre:true,attrs:{"class":"highlight__tag"}},[_vm._v("<"),_c(\'span\',{pre:true,attrs:{"class":"highlight__name"}},[_vm._v("template")]),_vm._v(">")]),_vm._v("\\n  "),_c(\'span\',{pre:true,attrs:{"class":"highlight__tag"}},[_vm._v("<"),_c(\'span\',{pre:true,attrs:{"class":"highlight__name"}},[_vm._v("main")]),_vm._v(">")]),_vm._v("\\n    "),_c(\'span\',{pre:true,attrs:{"class":"highlight__tag"}},[_vm._v("<"),_c(\'span\',{pre:true,attrs:{"class":"highlight__name"}},[_vm._v("h1")]),_vm._v(">")]),_vm._v("{{ post.title }}"),_c(\'span\',{pre:true,attrs:{"class":"highlight__tag"}},[_vm._v("</"),_c(\'span\',{pre:true,attrs:{"class":"highlight__name"}},[_vm._v("h1")]),_vm._v(">")]),_vm._v("\\n    "),_c(\'span\',{pre:true,attrs:{"class":"highlight__tag"}},[_vm._v("<"),_c(\'span\',{pre:true,attrs:{"class":"highlight__name"}},[_vm._v("p")]),_vm._v(">")]),_vm._v("{{ post.date.toLocaleDateString() }}"),_c(\'span\',{pre:true,attrs:{"class":"highlight__tag"}},[_vm._v("</"),_c(\'span\',{pre:true,attrs:{"class":"highlight__name"}},[_vm._v("p")]),_vm._v(">")]),_vm._v("\\n\\n    "),_c(\'span\',{pre:true,attrs:{"class":"highlight__comment"}},[_vm._v("\x3c!-- Our Markdown component! --\x3e")]),_vm._v("\\n    "),_c(\'span\',{pre:true,attrs:{"class":"highlight__tag"}},[_vm._v("<"),_c(\'span\',{pre:true,attrs:{"class":"highlight__name"}},[_vm._v("markdown")]),_vm._v(" "),_c(\'span\',{pre:true,attrs:{"class":"highlight__attr"}},[_vm._v(":markdown")]),_vm._v("="),_c(\'span\',{pre:true,attrs:{"class":"highlight__string"}},[_vm._v("\\"post\\"")]),_vm._v(" />")]),_vm._v("\\n  "),_c(\'span\',{pre:true,attrs:{"class":"highlight__tag"}},[_vm._v("</"),_c(\'span\',{pre:true,attrs:{"class":"highlight__name"}},[_vm._v("main")]),_vm._v(">")]),_vm._v("\\n"),_c(\'span\',{pre:true,attrs:{"class":"highlight__tag"}},[_vm._v("</"),_c(\'span\',{pre:true,attrs:{"class":"highlight__name"}},[_vm._v("template")]),_vm._v(">")]),_vm._v("\\n\\n"),_c(\'span\',{pre:true,attrs:{"class":"highlight__tag"}},[_vm._v("<"),_c(\'span\',{pre:true,attrs:{"class":"highlight__name"}},[_vm._v("script")]),_vm._v(">")]),_c(\'span\',{pre:true,attrs:{"class":"language-javascript"}},[_vm._v("\\n"),_c(\'span\',{pre:true,attrs:{"class":"highlight__keyword"}},[_vm._v("import")]),_vm._v(" "),_c(\'span\',{pre:true,attrs:{"class":"highlight__title class_"}},[_vm._v("Markdown")]),_vm._v(" "),_c(\'span\',{pre:true,attrs:{"class":"highlight__keyword"}},[_vm._v("from")]),_vm._v(" "),_c(\'span\',{pre:true,attrs:{"class":"highlight__string"}},[_vm._v("\'~/components/Markdown\'")]),_vm._v("\\n\\n"),_c(\'span\',{pre:true,attrs:{"class":"highlight__keyword"}},[_vm._v("export")]),_vm._v(" "),_c(\'span\',{pre:true,attrs:{"class":"highlight__keyword"}},[_vm._v("default")]),_vm._v(" {\\n  "),_c(\'span\',{pre:true,attrs:{"class":"highlight__attr"}},[_vm._v("components")]),_vm._v(": {\\n    "),_c(\'span\',{pre:true,attrs:{"class":"highlight__title class_"}},[_vm._v("Markdown")]),_vm._v("\\n  },\\n  "),_c(\'span\',{pre:true,attrs:{"class":"highlight__keyword"}},[_vm._v("async")]),_vm._v(" "),_c(\'span\',{pre:true,attrs:{"class":"highlight__title function_"}},[_vm._v("asyncData")]),_vm._v("("),_c(\'span\',{pre:true,attrs:{"class":"highlight__params"}},[_vm._v("{ params, error }")]),_vm._v(") {\\n    "),_c(\'span\',{pre:true,attrs:{"class":"highlight__keyword"}},[_vm._v("try")]),_vm._v(" {\\n      "),_c(\'span\',{pre:true,attrs:{"class":"highlight__keyword"}},[_vm._v("const")]),_vm._v(" post = "),_c(\'span\',{pre:true,attrs:{"class":"highlight__keyword"}},[_vm._v("await")]),_vm._v(" "),_c(\'span\',{pre:true,attrs:{"class":"highlight__title function_"}},[_vm._v("import")]),_vm._v("("),_c(\'span\',{pre:true,attrs:{"class":"highlight__string"}},[_vm._v("`~/contents/"),_c(\'span\',{pre:true,attrs:{"class":"highlight__subst"}},[_vm._v("${params.post}")]),_vm._v(".md`")]),_vm._v(")\\n      post."),_c(\'span\',{pre:true,attrs:{"class":"highlight__property"}},[_vm._v("attributes")]),_vm._v("."),_c(\'span\',{pre:true,attrs:{"class":"highlight__property"}},[_vm._v("date")]),_vm._v(" = "),_c(\'span\',{pre:true,attrs:{"class":"highlight__keyword"}},[_vm._v("new")]),_vm._v(" "),_c(\'span\',{pre:true,attrs:{"class":"highlight__title class_"}},[_vm._v("Date")]),_vm._v("(post."),_c(\'span\',{pre:true,attrs:{"class":"highlight__property"}},[_vm._v("attributes")]),_vm._v("."),_c(\'span\',{pre:true,attrs:{"class":"highlight__property"}},[_vm._v("date")]),_vm._v(")\\n\\n      "),_c(\'span\',{pre:true,attrs:{"class":"highlight__keyword"}},[_vm._v("return")]),_vm._v(" {\\n        "),_c(\'span\',{pre:true,attrs:{"class":"highlight__attr"}},[_vm._v("post")]),_vm._v(": {\\n          ...post."),_c(\'span\',{pre:true,attrs:{"class":"highlight__property"}},[_vm._v("attributes")]),_vm._v(",\\n          "),_c(\'span\',{pre:true,attrs:{"class":"highlight__attr"}},[_vm._v("vue")]),_vm._v(": post."),_c(\'span\',{pre:true,attrs:{"class":"highlight__property"}},[_vm._v("vue")]),_vm._v("\\n        }\\n      }\\n    } "),_c(\'span\',{pre:true,attrs:{"class":"highlight__keyword"}},[_vm._v("catch")]),_vm._v(" {\\n      "),_c(\'span\',{pre:true,attrs:{"class":"highlight__title function_"}},[_vm._v("error")]),_vm._v("({ "),_c(\'span\',{pre:true,attrs:{"class":"highlight__attr"}},[_vm._v("statusCode")]),_vm._v(": "),_c(\'span\',{pre:true,attrs:{"class":"highlight__number"}},[_vm._v("404")]),_vm._v(", "),_c(\'span\',{pre:true,attrs:{"class":"highlight__attr"}},[_vm._v("message")]),_vm._v(": "),_c(\'span\',{pre:true,attrs:{"class":"highlight__string"}},[_vm._v("\'This post could not be found\'")]),_vm._v(" })\\n    }\\n  }\\n}\\n")]),_c(\'span\',{pre:true,attrs:{"class":"highlight__tag"}},[_vm._v("</"),_c(\'span\',{pre:true,attrs:{"class":"highlight__name"}},[_vm._v("script")]),_vm._v(">")]),_vm._v("\\n")])])]) },function () { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'h2\',{attrs:{"id":"wrapping-up","tabindex":"-1"}},[_c(\'a\',{staticClass:"header-anchor",attrs:{"href":"#wrapping-up"}},[_vm._v("Wrapping Up")])]) },function () { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'p\',[_vm._v("That’s everything! When you’ve finished all of these steps, you’ll be able to write blog posts in Markdown and see them appear in your "),_c(\'code\',{pre:true},[_vm._v("/blog")]),_vm._v(" page. Clicking on a blog post will take you to "),_c(\'code\',{pre:true},[_vm._v("/blog/name-of-blog-post")]),_vm._v(", where you’ll see your blog post compiled from the Markdown using Vue’s render functions.")]) }]'}}}}]);